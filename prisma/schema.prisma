generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model AllUsers {
    id        String   @id @default(uuid())
    userId    String
    email     String
    username  String
    password  String
    role      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("all_users")
}

model SuperAdmin {
    id           String   @id @default(uuid())
    email        String   @unique
    username     String
    password     String
    role         String   @default("super-admin")
    gender       String
    dateOfBirth  String
    contactNo    String
    address      String
    profileImage String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@map("super_admin")
}

model Admin {
    id           String         @id @default(uuid())
    email        String         @unique
    username     String
    password     String
    role         String         @default("admin")
    gender       String
    dateOfBirth  String
    contactNo    String
    address      String
    profileImage String?
    adminRole    AdminRole?     @default(Moderator)
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    Blog         Blog[]
    todayFood    TodayFood[]
    riceAndPlan  PriceAndPlan[]
    menu         Menu[]
    fAQ          FAQ[]
    NewFood      NewFood[]

    @@map("admins")
}

model User {
    id                String              @id @default(uuid())
    email             String              @unique
    username          String
    password          String
    role              String              @default("user")
    gender            String
    dateOfBirth       String
    contactNo         String
    address           String
    profileImage      String?
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @updatedAt
    reviewAndRating   ReviewAndRating[]
    subscriptionModel SubscriptionModel[]
    feedback          Feedback[]
    todayFoodExtra    TodayFoodExtra[]
    pAYMENT           PAYMENT[]

    @@map("users")
}

model Menu {
    id              String            @id @default(uuid())
    title           String
    category        String
    image           String?
    adminId         String
    admin           Admin             @relation(fields: [adminId], references: [id])
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    reviewAndRating ReviewAndRating[]

    @@map("menu")
}

model PriceAndPlan {
    id           String           @id @default(uuid())
    subscription SubscriptionType
    content      String
    price        String
    adminId      String
    admin        Admin            @relation(fields: [adminId], references: [id])
    createdAt    DateTime         @default(now())
    updatedAt    DateTime         @updatedAt

    @@map("price_and_plan")
}

model SubscriptionModel {
    id           String              @id @default(uuid())
    subscription SubscriptionType
    price        String
    userId       String
    status       SubscriptionStatus?
    user         User                @relation(fields: [userId], references: [id])
    createdAt    DateTime            @default(now())
    updatedAt    DateTime            @updatedAt

    @@map("subscription_model")
}

model TodayFood {
    id        String    @id @default(uuid())
    title     String
    category  String
    image     String?
    shift     Shift
    isCancel  isCancel?
    adminId   String
    admin     Admin     @relation(fields: [adminId], references: [id])
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    @@map("today_food")
}

model TodayFoodExtra {
    id        String    @id @default(uuid())
    title     String
    category  String
    image     String?
    shift     Shift
    isCancel  isCancel?
    userId    String
    user      User      @relation(fields: [userId], references: [id])
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    @@map("today_food_extra")
}

model NewFood {
    id        String   @id @default(uuid())
    title     String
    category  String
    image     String?
    adminId   String
    admin     Admin    @relation(fields: [adminId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("new_food")
}

model ReviewAndRating {
    id        String   @id @default(uuid())
    review    String
    rating    String
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    menuId    String
    menu      Menu     @relation(fields: [menuId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("review_and_rating")
}

model Feedback {
    id        String   @id @default(uuid())
    subject   String
    message   String
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("feedback")
}

model Blog {
    id          String   @id @default(uuid())
    title       String
    description String
    adminId     String
    admin       Admin    @relation(fields: [adminId], references: [id])
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@map("blog")
}

model FAQ {
    id          String   @id @default(uuid())
    title       String
    description String
    adminId     String
    admin       Admin    @relation(fields: [adminId], references: [id])
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@map("faq")
}

model PAYMENT {
    id            String   @id @default(uuid())
    transactionId String
    price         Int
    userName      String
    userId        String
    user          User     @relation(fields: [userId], references: [id])
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    @@map("payment")
}

enum AdminRole {
    Administrator
    Moderator
    Editor
    Content_Creator
    Support_Staff
    Analytics_Manager
    Security_Manager
}

enum SubscriptionType {
    Yearly
    Monthly
}

enum Shift {
    LUNCH
    DINNER
}

enum SubscriptionStatus {
    REQUESTED
    ACTIVATE
    CANCEL
}

enum isCancel {
    YES
    NO
}
